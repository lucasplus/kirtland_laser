Important info:	- Everything is based on (cm) and (deg)	Folders:	Archives - folders full of old code	Test_ErrorFuncs - makes plots about the difference between the 2 error functions	Test_Quaternions - trying to make sense of quaternions	Tikz Figures - full of tikz figures which were used for the reportReoccurring variables:	observed - A Nx[3+length(angles)] matrix of the observation data 		{[User_c] [User_c_initial] [angles] [I]}			User_c - [x,z,theta] => command parameters		Specimen_p - [x_s,z_s,theta_s] => specimen geometry parameters		Detector_c - angular position of the sensor			T_Cell - a 2x5 cell array containing the transformation matrix in the top row and a label on the second row. 		L_Cell - a 1x5 cell array containing the information related to the laser	    p_reflect - point of reflection	    d_reflect - direction of reflection	    dn - direction of the normal	    I - intensity as seen by the detector	    d - distance from the beam to the detector (cm)	    PlayMe - a GUI written to explore the simulationf_Simulate : [T_Cell L_Cell] = f_Simulate(User_c,Specimen_p,Detector_c)	The first simulation function written. Not written for optimality but for readability. Has been verified with many hours playing with the GUI.f_Render : f_Render(T_Cell,L_Cell,plot_flag)	Function to create a figure of the test setup given the labels and needed transformation matrices and vectors.	f_Theta2theta : [I d] = f_Theta2theta(User_c,Specimen_p,angles)	Function to run the simulation in the most optimal way possible. Unfortunately, has not been completely verified because it doesn't provide an easy way to visualize data.f_Error :  y = f_Error(param)   (uses global to get the observed variable)	Function to determine the error given the observed data and a particular instance of the specimen parameters. 		Calls : f_Theta2theta; f_SignalRelation		f_Error :  [y1 y2] = f_Error2(param,observed)	Same as f_Error except finds error using both the old and new error functions. 		Calls : f_Theta2theta; f_SignalRelationf_SignalRelation : rAB = f_SignalRelation(A,B)	Function to determine relation between 2 signals. Works well.	fminlbfgs:	Function to implement the BFGS method. I didn't write it. It works well		s_Optimize_BFGS :	Script to realize the optimization using the BFGS method. Also, plots the entire error function. Takes about 10 minutes to run.		Calls: fminlbfgs; f_Error; F_Error2		s_OnlyOptimize_BFGS :	Script to realize the optimization using the BFGS method. 		Calls: fminlbfgs; f_Error; F_Error2s_ZPlotGaussianBeam : 	Creates a figure of the cross section of the Gaussian Beam.		s_ZPlotTheta2thetaExample :	Creates two figures to be used in the memo to explain the advantage of using Theta-2theta to detect a misalignment.		Calls: f_Theta2theta		